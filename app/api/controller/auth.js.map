{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\api\\controller\\auth.js"
    ],
    "names": [
        "Base",
        "require",
        "rp",
        "module",
        "exports",
        "loginByWeixinAction",
        "code",
        "post",
        "currentTime",
        "parseInt",
        "Date",
        "getTime",
        "clientIp",
        "options",
        "method",
        "url",
        "qs",
        "grant_type",
        "js_code",
        "secret",
        "think",
        "config",
        "appid",
        "sessionData",
        "JSON",
        "parse",
        "openid",
        "fail",
        "userId",
        "model",
        "where",
        "weixin_openid",
        "getField",
        "is_new",
        "buffer",
        "Buffer",
        "from",
        "nickname",
        "toString",
        "isEmpty",
        "add",
        "username",
        "uuid",
        "password",
        "register_time",
        "register_ip",
        "last_login_time",
        "last_login_ip",
        "mobile",
        "avatar",
        "user_id",
        "id",
        "update",
        "newUserInfo",
        "field",
        "find",
        "TokenSerivce",
        "service",
        "sessionKey",
        "create",
        "success",
        "token",
        "userInfo",
        "logoutAction"
    ],
    "mappings": "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",
    "file": "..\\..\\..\\src\\api\\controller\\auth.js",
    "sourcesContent": [
        "const Base = require(\"./base.js\");\nconst rp = require(\"request-promise\");\nmodule.exports = class extends Base {\n  async loginByWeixinAction() {\n    // const code = this.post('code');\n    const code = this.post(\"code\");\n    let currentTime = parseInt(new Date().getTime() / 1000);\n    const clientIp = \"\"; // 暂时不记录 ip test git\n    // 获取openid\n    const options = {\n      method: \"GET\",\n      url: \"https://api.weixin.qq.com/sns/jscode2session\",\n      qs: {\n        grant_type: \"authorization_code\",\n        js_code: code,\n        secret: think.config(\"weixin.secret\"),\n        appid: think.config(\"weixin.appid\"),\n      },\n    };\n    let sessionData = await rp(options);\n    sessionData = JSON.parse(sessionData);\n    if (!sessionData.openid) {\n      return this.fail(\"登录失败，openid无效\");\n    }\n    // 根据openid查找用户是否已经注册\n    let userId = await this.model(\"user\")\n      .where({\n        weixin_openid: sessionData.openid,\n      })\n      .getField(\"id\", true);\n    let is_new = 0;\n    const buffer = Buffer.from('微信用户');\n    let nickname = buffer.toString(\"base64\");\n    if (think.isEmpty(userId)) {\n      // 注册\n      userId = await this.model(\"user\").add({\n        username: \"微信用户\" + think.uuid(6),\n        password: sessionData.openid,\n        register_time: currentTime,\n        register_ip: clientIp,\n        last_login_time: currentTime,\n        last_login_ip: clientIp,\n        mobile: \"\",\n        weixin_openid: sessionData.openid,\n        nickname: nickname,\n        avatar:'/static/images/default_avatar.png'\n      });\n      is_new = 1;\n    }\n    sessionData.user_id = userId;\n    // 更新登录信息\n    await this.model(\"user\")\n      .where({\n        id: userId,\n      })\n      .update({\n        last_login_time: currentTime,\n        last_login_ip: clientIp,\n      });\n    const newUserInfo = await this.model(\"user\")\n      .field(\"id,username,nickname, avatar\")\n      .where({\n        id: userId,\n      })\n      .find();\n    newUserInfo.nickname = Buffer.from(\n      newUserInfo.nickname,\n      \"base64\"\n    ).toString();\n    const TokenSerivce = this.service(\"token\", \"api\");\n    const sessionKey = await TokenSerivce.create(sessionData);\n    if (think.isEmpty(newUserInfo) || think.isEmpty(sessionKey)) {\n      return this.fail(\"登录失败4\");\n    }\n    return this.success({\n      token: sessionKey,\n      userInfo: newUserInfo,\n      is_new: is_new,\n    });\n  }\n  async logoutAction() {\n    return this.success();\n  }\n};\n"
    ]
}