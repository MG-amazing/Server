{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\api\\controller\\order.js"
    ],
    "names": [
        "Base",
        "require",
        "moment",
        "rp",
        "fs",
        "http",
        "module",
        "exports",
        "listAction",
        "userId",
        "getLoginUserId",
        "showType",
        "get",
        "page",
        "size",
        "status",
        "model",
        "getOrderStatus",
        "is_delete",
        "orderList",
        "field",
        "where",
        "user_id",
        "order_type",
        "order_status",
        "order",
        "countSelect",
        "newOrderList",
        "item",
        "data",
        "goodsList",
        "order_id",
        "id",
        "select",
        "goodsCount",
        "forEach",
        "v",
        "number",
        "add_time",
        "unix",
        "getOrderAddTime",
        "format",
        "order_status_text",
        "getOrderStatusText",
        "handleOption",
        "getOrderHandleOption",
        "push",
        "success",
        "countAction",
        "allCount",
        "count",
        "orderCountAction",
        "toPay",
        "toDelivery",
        "toReceive",
        "newStatus",
        "detailAction",
        "orderId",
        "orderInfo",
        "find",
        "currentTime",
        "parseInt",
        "Date",
        "getTime",
        "think",
        "isEmpty",
        "fail",
        "province_name",
        "province",
        "getField",
        "city_name",
        "city",
        "district_name",
        "district",
        "full_region",
        "postscript",
        "Buffer",
        "from",
        "toString",
        "orderGoods",
        "gitem",
        "confirm_time",
        "dealdone_time",
        "pay_time",
        "shipping_time",
        "confirm_remainTime",
        "final_pay_time",
        "updateInfo",
        "update",
        "textCode",
        "getOrderTextCode",
        "orderGoodsAction",
        "cartList",
        "checked",
        "is_fast",
        "cancelAction",
        "post",
        "cancel",
        "goodsInfo",
        "goods_id",
        "product_id",
        "increment",
        "succesInfo",
        "deleteAction",
        "delete",
        "orderDeleteById",
        "confirmAction",
        "confirm",
        "completeAction",
        "submitAction",
        "addressId",
        "freightPrice",
        "offlinePay",
        "buffer",
        "checkedAddress",
        "checkedGoodsList",
        "checkPrice",
        "checkStock",
        "product",
        "goods_number",
        "retail_price",
        "add_price",
        "goodsTotalPrice",
        "cartItem",
        "orderTotalPrice",
        "actualPrice",
        "print_info",
        "i",
        "Number",
        "goods_aka",
        "def",
        "sender_name",
        "Name",
        "sender_mobile",
        "Tel",
        "userInfo",
        "order_sn",
        "generateOrderNumber",
        "consignee",
        "name",
        "mobile",
        "province_id",
        "city_id",
        "district_id",
        "address",
        "freight_price",
        "goods_price",
        "order_price",
        "actual_price",
        "change_price",
        "offline_pay",
        "add",
        "orderGoodsData",
        "goodsItem",
        "goods_name",
        "list_pic_url",
        "goods_specifition_name_value",
        "goods_specifition_ids",
        "addMany",
        "clearBuyGoods",
        "updateAction",
        "updateAddress",
        "expressAction",
        "info",
        "expressInfo",
        "updateTime",
        "update_time",
        "com",
        "is_finish",
        "shipperCode",
        "shipper_code",
        "expressNo",
        "logistic_code",
        "lastExpressInfo",
        "getExpressInfo",
        "deliverystatus",
        "newUpdateTime",
        "getDeliverystatus",
        "issign",
        "traces",
        "list",
        "JSON",
        "stringify",
        "dataInfo",
        "express_status",
        "express",
        "appCode",
        "config",
        "options",
        "method",
        "url",
        "headers",
        "sessionData",
        "parse",
        "result"
    ],
    "mappings": "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",
    "file": "..\\..\\..\\src\\api\\controller\\order.js",
    "sourcesContent": [
        "const Base = require('./base.js');\nconst moment = require('moment');\nconst rp = require('request-promise');\nconst fs = require('fs');\nconst http = require(\"http\");\nmodule.exports = class extends Base {\n    /**\n     * 获取订单列表\n     * @return {Promise} []\n     */\n    async listAction() {\n\t\t// const userId = this.getLoginUserId();;\n\t\tconst userId = this.getLoginUserId();\n\t\tconst showType = this.get('showType');\n        const page = this.get('page');\n        const size = this.get('size');\n        let status = [];\n        status = await this.model('order').getOrderStatus(showType);\n        let is_delete = 0;\n        const orderList = await this.model('order').field('id,add_time,actual_price,freight_price,offline_pay').where({\n            user_id: userId,\n            is_delete: is_delete,\n            order_type: ['<', 7],\n            order_status: ['IN', status]\n        }).page(page, size).order('add_time DESC').countSelect();\n        const newOrderList = [];\n        for (const item of orderList.data) {\n            // 订单的商品\n            item.goodsList = await this.model('order_goods').field('id,list_pic_url,number').where({\n                user_id: userId,\n                order_id: item.id,\n                is_delete: 0\n            }).select();\n            item.goodsCount = 0;\n            item.goodsList.forEach(v => {\n                item.goodsCount += v.number;\n            });\n            item.add_time = moment.unix(await this.model('order').getOrderAddTime(item.id)).format('YYYY-MM-DD HH:mm:ss');\n            // item.dealdone_time = moment.unix(await this.model('order').getOrderAddTime(item.id)).format('YYYY-MM-DD HH:mm:ss');\n            // item.add_time =this.timestampToTime(await this.model('order').getOrderAddTime(item.id));\n            // 订单状态的处理\n            item.order_status_text = await this.model('order').getOrderStatusText(item.id);\n            // 可操作的选项\n            item.handleOption = await this.model('order').getOrderHandleOption(item.id);\n            newOrderList.push(item);\n        }\n        orderList.data = newOrderList;\n        return this.success(orderList);\n    }\n    // 获得订单数量\n    //\n    async countAction() {\n        const showType = this.get('showType');\n\t\tconst userId = this.getLoginUserId();;\n        let status = [];\n        status = await this.model('order').getOrderStatus(showType);\n        let is_delete = 0;\n        const allCount = await this.model('order').where({\n            user_id: userId,\n            is_delete: is_delete,\n            order_status: ['IN', status]\n        }).count('id');\n        return this.success({\n            allCount: allCount,\n        });\n    }\n    // 获得订单数量状态\n    //\n    async orderCountAction() {\n\t\t// const user_id = this.getLoginUserId();;\n\t\tconst user_id = this.getLoginUserId();\n        if(user_id != 0){\n            let toPay = await this.model('order').where({\n                user_id: user_id,\n                is_delete: 0,\n                order_type: ['<', 7],\n                order_status: ['IN', '101,801']\n            }).count('id');\n            let toDelivery = await this.model('order').where({\n                user_id: user_id,\n                is_delete: 0,\n                order_type: ['<', 7],\n                order_status: 300\n            }).count('id');\n            let toReceive = await this.model('order').where({\n                user_id: user_id,\n                order_type: ['<', 7],\n                is_delete: 0,\n                order_status: 301\n            }).count('id');\n            let newStatus = {\n                toPay: toPay,\n                toDelivery: toDelivery,\n                toReceive: toReceive,\n            }\n            return this.success(newStatus);\n        }\n       \n    }\n    async detailAction() {\n        const orderId = this.get('orderId');\n\t\tconst userId = this.getLoginUserId();;\n        const orderInfo = await this.model('order').where({\n            user_id: userId,\n            id: orderId\n        }).find();\n        const currentTime = parseInt(new Date().getTime() / 1000);\n        if (think.isEmpty(orderInfo)) {\n            return this.fail('订单不存在');\n        }\n        orderInfo.province_name = await this.model('region').where({\n            id: orderInfo.province\n        }).getField('name', true);\n        orderInfo.city_name = await this.model('region').where({\n            id: orderInfo.city\n        }).getField('name', true);\n        orderInfo.district_name = await this.model('region').where({\n            id: orderInfo.district\n        }).getField('name', true);\n        orderInfo.full_region = orderInfo.province_name + orderInfo.city_name + orderInfo.district_name;\n        orderInfo.postscript = Buffer.from(orderInfo.postscript, 'base64').toString();\n        const orderGoods = await this.model('order_goods').where({\n            user_id: userId,\n            order_id: orderId,\n            is_delete: 0\n        }).select();\n        var goodsCount = 0;\n        for (const gitem of orderGoods) {\n            goodsCount += gitem.number;\n        }\n        // 订单状态的处理\n        orderInfo.order_status_text = await this.model('order').getOrderStatusText(orderId);\n        if (think.isEmpty(orderInfo.confirm_time)) {\n            orderInfo.confirm_time = 0;\n        } else orderInfo.confirm_time = moment.unix(orderInfo.confirm_time).format('YYYY-MM-DD HH:mm:ss');\n        if (think.isEmpty(orderInfo.dealdone_time)) {\n            orderInfo.dealdone_time = 0;\n        } else orderInfo.dealdone_time = moment.unix(orderInfo.dealdone_time).format('YYYY-MM-DD HH:mm:ss');\n        if (think.isEmpty(orderInfo.pay_time)) {\n            orderInfo.pay_time = 0;\n        } else orderInfo.pay_time = moment.unix(orderInfo.pay_time).format('YYYY-MM-DD HH:mm:ss');\n        if (think.isEmpty(orderInfo.shipping_time)) {\n            orderInfo.shipping_time = 0;\n        } else {\n            orderInfo.confirm_remainTime = orderInfo.shipping_time + 10 * 24 * 60 * 60;\n            orderInfo.shipping_time = moment.unix(orderInfo.shipping_time).format('YYYY-MM-DD HH:mm:ss');\n        }\n        // 订单支付倒计时\n        if (orderInfo.order_status === 101 || orderInfo.order_status === 801) {\n            // if (moment().subtract(60, 'minutes') < moment(orderInfo.add_time)) {\n            orderInfo.final_pay_time = orderInfo.add_time + 24 * 60 * 60; //支付倒计时2小时\n            if (orderInfo.final_pay_time < currentTime) {\n                //超过时间不支付，更新订单状态为取消\n                let updateInfo = {\n                    order_status: 102\n                };\n                await this.model('order').where({\n                    id: orderId\n                }).update(updateInfo);\n            }\n        }\n        orderInfo.add_time = moment.unix(orderInfo.add_time).format('YYYY-MM-DD HH:mm:ss');\n        orderInfo.order_status = '';\n        // 订单可操作的选择,删除，支付，收货，评论，退换货\n        const handleOption = await this.model('order').getOrderHandleOption(orderId);\n        const textCode = await this.model('order').getOrderTextCode(orderId);\n        return this.success({\n            orderInfo: orderInfo,\n            orderGoods: orderGoods,\n            handleOption: handleOption,\n            textCode: textCode,\n            goodsCount: goodsCount,\n        });\n    }\n    /**\n     * order 和 order-check 的goodslist\n     * @return {Promise} []\n     */\n    async orderGoodsAction() {\n\t\tconst userId = this.getLoginUserId();;\n        const orderId = this.get('orderId');\n        if (orderId > 0) {\n            const orderGoods = await this.model('order_goods').where({\n                user_id: userId,\n                order_id: orderId,\n                is_delete: 0\n            }).select();\n            var goodsCount = 0;\n            for (const gitem of orderGoods) {\n                goodsCount += gitem.number;\n            }\n            return this.success(orderGoods);\n        } else {\n            const cartList = await this.model('cart').where({\n                user_id: userId,\n                checked:1,\n                is_delete: 0,\n                is_fast: 0,\n            }).select();\n            return this.success(cartList);\n        }\n    }\n    /**\n     * 取消订单\n     * @return {Promise} []\n     */\n    async cancelAction() {\n        const orderId = this.post('orderId');\n\t\tconst userId = this.getLoginUserId();;\n        // 检测是否能够取消\n        const handleOption = await this.model('order').getOrderHandleOption(orderId);\n        // console.log('--------------' + handleOption.cancel);\n        if (!handleOption.cancel) {\n            return this.fail('订单不能取消');\n        }\n        // 设置订单已取消状态\n        let updateInfo = {\n            order_status: 102\n        };\n        let orderInfo = await this.model('order').field('order_type').where({\n            id: orderId,\n            user_id: userId\n        }).find();\n        //取消订单，还原库存\n        const goodsInfo = await this.model('order_goods').where({\n            order_id: orderId,\n            user_id: userId\n        }).select();\n        for (const item of goodsInfo) {\n            let goods_id = item.goods_id;\n            let product_id = item.product_id;\n            let number = item.number;\n            await this.model('goods').where({\n                id: goods_id\n            }).increment('goods_number', number);\n            await this.model('product').where({\n                id: product_id\n            }).increment('goods_number', number);\n        }\n        const succesInfo = await this.model('order').where({\n            id: orderId\n        }).update(updateInfo);\n        return this.success(succesInfo);\n    }\n    /**\n     * 删除订单\n     * @return {Promise} []\n     */\n    async deleteAction() {\n        const orderId = this.post('orderId');\n        // 检测是否能够取消\n        const handleOption = await this.model('order').getOrderHandleOption(orderId);\n        if (!handleOption.delete) {\n            return this.fail('订单不能删除');\n        }\n        const succesInfo = await this.model('order').orderDeleteById(orderId);\n        return this.success(succesInfo);\n    }\n    /**\n     * 确认订单\n     * @return {Promise} []\n     */\n    async confirmAction() {\n        const orderId = this.post('orderId');\n        // 检测是否能够取消\n        const handleOption = await this.model('order').getOrderHandleOption(orderId);\n        if (!handleOption.confirm) {\n            return this.fail('订单不能确认');\n        }\n        // 设置订单已取消状态\n        const currentTime = parseInt(new Date().getTime() / 1000);\n        let updateInfo = {\n            order_status: 401,\n            confirm_time: currentTime\n        };\n        const succesInfo = await this.model('order').where({\n            id: orderId\n        }).update(updateInfo);\n        return this.success(succesInfo);\n    }\n    /**\n     * 完成评论后的订单\n     * @return {Promise} []\n     */\n    async completeAction() {\n        const orderId = this.get('orderId');\n        // 设置订单已完成\n        const currentTime = parseInt(new Date().getTime() / 1000);\n        let updateInfo = {\n            order_status: 401,\n            dealdone_time: currentTime\n        };\n        const succesInfo = await this.model('order').where({\n            id: orderId\n        }).update(updateInfo);\n        return this.success(succesInfo);\n    }\n    /**\n     * 提交订单\n     * @returns {Promise.<void>}\n     */\n    async submitAction() {\n        // 获取收货地址信息和计算运费\n\t\tconst userId = this.getLoginUserId();;\n        const addressId = this.post('addressId');\n        const freightPrice = this.post('freightPrice');\n        const offlinePay = this.post('offlinePay');\n        let postscript = this.post('postscript');\n        const buffer = Buffer.from(postscript); // 留言\n        const checkedAddress = await this.model('address').where({\n            id: addressId\n        }).find();\n        if (think.isEmpty(checkedAddress)) {\n            return this.fail('请选择收货地址');\n        }\n        // 获取要购买的商品\n        const checkedGoodsList = await this.model('cart').where({\n            user_id: userId,\n            checked: 1,\n            is_delete: 0\n        }).select();\n        if (think.isEmpty(checkedGoodsList)) {\n            return this.fail('请选择商品');\n        }\n        let checkPrice = 0;\n        let checkStock = 0;\n        for(const item of checkedGoodsList){\n            let product = await this.model('product').where({\n                id:item.product_id\n            }).find();\n            if(item.number > product.goods_number){\n                checkStock++;\n            }\n            if(item.retail_price != item.add_price){\n                checkPrice++;\n            }\n        }\n        if(checkStock > 0){\n            return this.fail(400, '库存不足，请重新下单');\n        }\n        if(checkPrice > 0){\n            return this.fail(400, '价格发生变化，请重新下单');\n        }\n        // 获取订单使用的红包\n        // 如果有用红包，则将红包的数量减少，当减到0时，将该条红包删除\n        // 统计商品总价\n        let goodsTotalPrice = 0.00;\n        for (const cartItem of checkedGoodsList) {\n            goodsTotalPrice += cartItem.number * cartItem.retail_price;\n        }\n        // 订单价格计算\n        const orderTotalPrice = goodsTotalPrice + freightPrice; // 订单的总价\n        const actualPrice = orderTotalPrice - 0.00; // 减去其它支付的金额后，要实际支付的金额 比如满减等优惠\n        const currentTime = parseInt(new Date().getTime() / 1000);\n        let print_info = '';\n        for (const item in checkedGoodsList) {\n            let i = Number(item) + 1;\n            print_info = print_info + i + '、' + checkedGoodsList[item].goods_aka + '【' + checkedGoodsList[item].number + '】 ';\n        }\n        let def = await this.model('settings').where({\n            id: 1\n        }).find();\n        let sender_name = def.Name;\n        let sender_mobile = def.Tel;\n        // let sender_address = '';\n        let userInfo = await this.model('user').where({\n            id: userId\n        }).find();\n        // const checkedAddress = await this.model('address').where({id: addressId}).find();\n        const orderInfo = {\n            order_sn: this.model('order').generateOrderNumber(),\n            user_id: userId,\n            // 收货地址和运费\n            consignee: checkedAddress.name,\n            mobile: checkedAddress.mobile,\n            province: checkedAddress.province_id,\n            city: checkedAddress.city_id,\n            district: checkedAddress.district_id,\n            address: checkedAddress.address,\n            order_status: 101, // 订单初始状态为 101\n            // 根据城市得到运费，这里需要建立表：所在城市的具体运费\n            freight_price: freightPrice,\n            postscript: buffer.toString('base64'),\n            add_time: currentTime,\n            goods_price: goodsTotalPrice,\n            order_price: orderTotalPrice,\n            actual_price: actualPrice,\n            change_price: actualPrice,\n            print_info: print_info,\n            offline_pay:offlinePay\n        };\n        // 开启事务，插入订单信息和订单商品\n        const orderId = await this.model('order').add(orderInfo);\n        orderInfo.id = orderId;\n        if (!orderId) {\n            return this.fail('订单提交失败');\n        }\n        // 将商品信息录入数据库\n        const orderGoodsData = [];\n        for (const goodsItem of checkedGoodsList) {\n            orderGoodsData.push({\n                user_id: userId,\n                order_id: orderId,\n                goods_id: goodsItem.goods_id,\n                product_id: goodsItem.product_id,\n                goods_name: goodsItem.goods_name,\n                goods_aka: goodsItem.goods_aka,\n                list_pic_url: goodsItem.list_pic_url,\n                retail_price: goodsItem.retail_price,\n                number: goodsItem.number,\n                goods_specifition_name_value: goodsItem.goods_specifition_name_value,\n                goods_specifition_ids: goodsItem.goods_specifition_ids\n            });\n        }\n        await this.model('order_goods').addMany(orderGoodsData);\n        await this.model('cart').clearBuyGoods();\n        return this.success({\n            orderInfo: orderInfo\n        });\n    }\n    async updateAction() {\n        const addressId = this.post('addressId');\n        const orderId = this.post('orderId');\n        // 备注\n        // let postscript = this.post('postscript');\n        // const buffer = Buffer.from(postscript);\n        const updateAddress = await this.model('address').where({\n            id: addressId\n        }).find();\n        const currentTime = parseInt(new Date().getTime() / 1000);\n        const orderInfo = {\n            // 收货地址和运费\n            consignee: updateAddress.name,\n            mobile: updateAddress.mobile,\n            province: updateAddress.province_id,\n            city: updateAddress.city_id,\n            district: updateAddress.district_id,\n            address: updateAddress.address,\n            // TODO 根据地址计算运费\n            // freight_price: 0.00,\n            // 备注\n            // postscript: buffer.toString('base64'),\n            // add_time: currentTime\n        };\n        const updateInfo = await this.model('order').where({\n            id: orderId\n        }).update(orderInfo);\n        return this.success(updateInfo);\n    }\n    /**\n     * 查询物流信息asd\n     * @returns {Promise.<void>}\n     */\n    async expressAction() {\n        const currentTime = parseInt(new Date().getTime() / 1000);\n        const orderId = this.get('orderId');\n        let info = await this.model('order_express').where({\n            order_id: orderId\n        }).find();\n        if (think.isEmpty(info)) {\n            return this.fail(400, '暂无物流信息');\n        }\n        const expressInfo = await this.model('order_express').where({\n            order_id: orderId\n        }).find();\n        // 如果is_finish == 1；或者 updateTime 小于 1分钟，\n        let updateTime = info.update_time;\n        let com = (currentTime - updateTime) / 60;\n        let is_finish = info.is_finish;\n        if (is_finish == 1) {\n            return this.success(expressInfo);\n        } else if (updateTime != 0 && com < 20) {\n            return this.success(expressInfo);\n        } else {\n            let shipperCode = expressInfo.shipper_code;\n            let expressNo = expressInfo.logistic_code;\n            let lastExpressInfo = await this.getExpressInfo(shipperCode, expressNo);\n            let deliverystatus = lastExpressInfo.deliverystatus;\n            let newUpdateTime = lastExpressInfo.updateTime;\n            newUpdateTime = parseInt(new Date(newUpdateTime).getTime() / 1000);\n            deliverystatus = await this.getDeliverystatus(deliverystatus);\n            let issign = lastExpressInfo.issign;\n            let traces = lastExpressInfo.list;\n            traces = JSON.stringify(traces);\n            let dataInfo = {\n                express_status: deliverystatus,\n                is_finish: issign,\n                traces: traces,\n                update_time: newUpdateTime\n            }\n            await this.model('order_express').where({\n                order_id: orderId\n            }).update(dataInfo);\n            let express = await this.model('order_express').where({\n                order_id: orderId\n            }).find();\n            return this.success(express);\n        }\n        // return this.success(latestExpressInfo);\n    }\n    async getExpressInfo(shipperCode, expressNo) {\n\t\tlet appCode = \"APPCODE \"+ think.config('aliexpress.appcode');\n        const options = {\n            method: 'GET',\n            url: 'http://wuliu.market.alicloudapi.com/kdi?no=' + expressNo + '&type=' + shipperCode,\n            headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\",\n                \"Authorization\": appCode\n            }\n        };\n        let sessionData = await rp(options);\n        sessionData = JSON.parse(sessionData);\n        return sessionData.result;\n    }\n    async getDeliverystatus(status) {\n        if (status == 0) {\n            return '快递收件(揽件)';\n        } else if (status == 1) {\n            return '在途中';\n        } else if (status == 2) {\n            return '正在派件';\n        } else if (status == 3) {\n            return '已签收';\n        } else if (status == 4) {\n            return '派送失败(无法联系到收件人或客户要求择日派送，地址不详或手机号不清)';\n        } else if (status == 5) {\n            return '疑难件(收件人拒绝签收，地址有误或不能送达派送区域，收费等原因无法正常派送)';\n        } else if (status == 6) {\n            return '退件签收';\n        }\n    }\n};"
    ]
}